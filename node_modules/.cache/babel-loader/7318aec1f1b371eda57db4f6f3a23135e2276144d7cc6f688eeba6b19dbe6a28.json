{"ast":null,"code":"// src/serviceWorker.js\n\n// Este archivo se creó con create-react-app\n// https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] es la dirección IPv6 de localhost.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 son considerados localhost para IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // El URL constructor se usa para asegurar que los URLs de nuestro service worker están\n    // localizados en el mismo origen que nuestra página web.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Nuestro service worker no funcionará si PUBLIC_URL está en un origen diferente\n      // del que nuestra página web. Esto podría ocurrir si un CDN se está usando para\n      // servir assets; ver https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // Esto corre adicionalmente chequeos en localhost. Esto aseguran que un service worker\n        // aún es útil en el modo de desarrollo, y para ayudar a depurar problemas.\n        checkValidServiceWorker(swUrl, config);\n\n        // Añadir algunos logs adicionales al localhost, apuntando a los desarrolladores\n        // a la documentación de service worker/PWA.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('Esta aplicación está siendo servida cache-first por un service worker. ' + 'Para más información, visita https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Solo registrar el service worker en producción\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // En este punto, el contenido previamente cacheado se ha actualizado,\n            // pero el service worker anterior seguirá sirviendo el contenido viejo\n            // hasta que todas las pestañas del cliente sean cerradas.\n            console.log('Nuevo contenido está disponible y será usado cuando ' + 'todas las pestañas para esta página sean cerradas.');\n\n            // Ejecutar callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // En este punto, todo está cacheado.\n            // Es el momento perfecto para mostrar\n            // una notificación \"Content is cached for offline use\".\n            console.log('Contenido está cacheado para su uso offline.');\n\n            // Ejecutar callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error durante el registro del service worker:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Verificar si el service worker puede ser encontrado. Si no puede recargar la página.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Asegurar que el service worker existe, y que realmente estamos obteniendo un archivo JS.\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No se encontró ningún service worker. Probablemente una app diferente. Recargar la página.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker encontrado. Proceder normalmente.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No se pudo conectar a Internet. La aplicación se está ejecutando en modo offline.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["D:/proyectosPersonales/video-downloader/frontend/src/serviceWorker.js"],"sourcesContent":["// src/serviceWorker.js\r\n\r\n// Este archivo se creó con create-react-app\r\n// https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] es la dirección IPv6 de localhost.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 son considerados localhost para IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // El URL constructor se usa para asegurar que los URLs de nuestro service worker están\r\n      // localizados en el mismo origen que nuestra página web.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Nuestro service worker no funcionará si PUBLIC_URL está en un origen diferente\r\n        // del que nuestra página web. Esto podría ocurrir si un CDN se está usando para\r\n        // servir assets; ver https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // Esto corre adicionalmente chequeos en localhost. Esto aseguran que un service worker\r\n          // aún es útil en el modo de desarrollo, y para ayudar a depurar problemas.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Añadir algunos logs adicionales al localhost, apuntando a los desarrolladores\r\n          // a la documentación de service worker/PWA.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'Esta aplicación está siendo servida cache-first por un service worker. ' +\r\n                'Para más información, visita https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Solo registrar el service worker en producción\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // En este punto, el contenido previamente cacheado se ha actualizado,\r\n                // pero el service worker anterior seguirá sirviendo el contenido viejo\r\n                // hasta que todas las pestañas del cliente sean cerradas.\r\n                console.log(\r\n                  'Nuevo contenido está disponible y será usado cuando ' +\r\n                    'todas las pestañas para esta página sean cerradas.'\r\n                );\r\n  \r\n                // Ejecutar callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // En este punto, todo está cacheado.\r\n                // Es el momento perfecto para mostrar\r\n                // una notificación \"Content is cached for offline use\".\r\n                console.log('Contenido está cacheado para su uso offline.');\r\n  \r\n                // Ejecutar callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error durante el registro del service worker:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Verificar si el service worker puede ser encontrado. Si no puede recargar la página.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then((response) => {\r\n        // Asegurar que el service worker existe, y que realmente estamos obteniendo un archivo JS.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No se encontró ningún service worker. Probablemente una app diferente. Recargar la página.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker encontrado. Proceder normalmente.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No se pudo conectar a Internet. La aplicación se está ejecutando en modo offline.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}