{"ast":null,"code":"// src/serviceWorker.js\n// Este archivo se creó con create-react-app\n// https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\nconst isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] es la dirección IPv6 de localhost.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 son considerados localhost para IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// El URL constructor se usa para asegurar que los URLs de nuestro service worker están\n// localizados en el mismo origen que nuestra página web.\nconst publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Nuestro service worker no funcionará si PUBLIC_URL está en un origen diferente\n// del que nuestra página web. Esto podría ocurrir si un CDN se está usando para\n// servir assets; ver https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',()=>{const swUrl=`${process.env.PUBLIC_URL}/service-worker.js`;if(isLocalhost){// Esto corre adicionalmente chequeos en localhost. Esto aseguran que un service worker\n// aún es útil en el modo de desarrollo, y para ayudar a depurar problemas.\ncheckValidServiceWorker(swUrl,config);// Añadir algunos logs adicionales al localhost, apuntando a los desarrolladores\n// a la documentación de service worker/PWA.\nnavigator.serviceWorker.ready.then(()=>{console.log('Esta aplicación está siendo servida cache-first por un service worker. '+'Para más información, visita https://bit.ly/CRA-PWA');});}else{// Solo registrar el service worker en producción\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(registration=>{registration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=()=>{if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// En este punto, el contenido previamente cacheado se ha actualizado,\n// pero el service worker anterior seguirá sirviendo el contenido viejo\n// hasta que todas las pestañas del cliente sean cerradas.\nconsole.log('Nuevo contenido está disponible y será usado cuando '+'todas las pestañas para esta página sean cerradas.');// Ejecutar callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// En este punto, todo está cacheado.\n// Es el momento perfecto para mostrar\n// una notificación \"Content is cached for offline use\".\nconsole.log('Contenido está cacheado para su uso offline.');// Ejecutar callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(error=>{console.error('Error durante el registro del service worker:',error);});}function checkValidServiceWorker(swUrl,config){// Verificar si el service worker puede ser encontrado. Si no puede recargar la página.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(response=>{// Asegurar que el service worker existe, y que realmente estamos obteniendo un archivo JS.\nconst contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No se encontró ningún service worker. Probablemente una app diferente. Recargar la página.\nnavigator.serviceWorker.ready.then(registration=>{registration.unregister().then(()=>{window.location.reload();});});}else{// Service worker encontrado. Proceder normalmente.\nregisterValidSW(swUrl,config);}}).catch(()=>{console.log('No se pudo conectar a Internet. La aplicación se está ejecutando en modo offline.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();}).catch(error=>{console.error(error.message);});}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["D:/proyectosPersonales/video-downloader/frontend/src/serviceWorker.js"],"sourcesContent":["// src/serviceWorker.js\r\n\r\n// Este archivo se creó con create-react-app\r\n// https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] es la dirección IPv6 de localhost.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 son considerados localhost para IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // El URL constructor se usa para asegurar que los URLs de nuestro service worker están\r\n      // localizados en el mismo origen que nuestra página web.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Nuestro service worker no funcionará si PUBLIC_URL está en un origen diferente\r\n        // del que nuestra página web. Esto podría ocurrir si un CDN se está usando para\r\n        // servir assets; ver https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // Esto corre adicionalmente chequeos en localhost. Esto aseguran que un service worker\r\n          // aún es útil en el modo de desarrollo, y para ayudar a depurar problemas.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Añadir algunos logs adicionales al localhost, apuntando a los desarrolladores\r\n          // a la documentación de service worker/PWA.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'Esta aplicación está siendo servida cache-first por un service worker. ' +\r\n                'Para más información, visita https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Solo registrar el service worker en producción\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // En este punto, el contenido previamente cacheado se ha actualizado,\r\n                // pero el service worker anterior seguirá sirviendo el contenido viejo\r\n                // hasta que todas las pestañas del cliente sean cerradas.\r\n                console.log(\r\n                  'Nuevo contenido está disponible y será usado cuando ' +\r\n                    'todas las pestañas para esta página sean cerradas.'\r\n                );\r\n  \r\n                // Ejecutar callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // En este punto, todo está cacheado.\r\n                // Es el momento perfecto para mostrar\r\n                // una notificación \"Content is cached for offline use\".\r\n                console.log('Contenido está cacheado para su uso offline.');\r\n  \r\n                // Ejecutar callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error durante el registro del service worker:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Verificar si el service worker puede ser encontrado. Si no puede recargar la página.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then((response) => {\r\n        // Asegurar que el service worker existe, y que realmente estamos obteniendo un archivo JS.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No se encontró ningún service worker. Probablemente una app diferente. Recargar la página.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker encontrado. Proceder normalmente.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No se pudo conectar a Internet. La aplicación se está ejecutando en modo offline.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}